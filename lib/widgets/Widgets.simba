
type TReflectWidget = type(TData);

procedure TReflectWidget.GetChild(ContainerIndex, ChildIndex: Integer);
begin
  Self.ObjRef := Reflect.Smart.GetFieldArray2DObject(0, Client_GetWidgets,
    ContainerIndex, ChildIndex);
end;

function TReflectWidget.GetWidgetID: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_WidgetID);
end;

function TReflectWidget.GetParentID: Integer;
var
  HeadUID, I: Integer;
  CurrentNode, HeadNode, Table, TempNode: SmartObj;
begin
  Result := Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_GetParentID);
  if (Result > 0) then
    Exit;

  Result := Sar(Self.GetWidgetID, 16);
  Table.GetFieldObject(0, Client_WidgetNodeCache);
  try
    for I := 0 to Reflect.Smart.GetArraySize(Table.ObjRef, HashTable_Buckets, 0) - 1 do
    begin
      HeadNode.GetFieldArrayObject(Table.ObjRef, HashTable_Buckets, I);
      HeadUID := HeadNode.GetFieldLongL(Node_UID);
      CurrentNode.GetFieldObject(HeadNode.ObjRef, Node_Next);
      while HeadUID <> CurrentNode.GetFieldLongL(Node_UID) do
      begin
        if Result = CurrentNode.GetFieldInt(WidgetNode_ID) then
          Exit(CurrentNode.GetFieldLongL(Node_UID));
        TempNode := CurrentNode;
        CurrentNode.GetFieldObject(Node_Next);
        TempNode.Free;
      end;
      HeadNode.Free;
    end;
  finally
    HeadNode.Free;
    CurrentNode.Free;
    TempNode.Free;
    Table.Free;
  end;
  Result := -1;
end;

function TReflectWidget.GetParent(ParentID: Integer): Boolean;
begin
  Result := False;
  if (ParentID >= 0) and Self.ValidChild(ParentID shr 16, ParentID and $FFFF) then
  begin
    Self.GetChild(ParentID shr 16, ParentID and $FFFF);
    if Self.GetParentID = ParentID then
      Self.Free
    else
      Result := True;
  end;
end;

function TReflectWidget.GetBoundsIndex: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_BoundsIndex);
end;

function TReflectWidget.ValidChild(ContainerIndex, ChildIndex: Integer): Boolean;
var
  ChildRef: SmartObj;
begin
  ChildRef.GetFieldArray2DObject(0, Client_GetWidgets, ContainerIndex, ChildIndex);
  Result := ChildRef.ObjRef > 0;
  ChildRef.Free;
end;

function TReflectWidget.HasGrandChild: Boolean;
begin
  Result := Reflect.Smart.GetArraySize(Self.ObjRef, Widget_Children, 0) > 0;
end;

procedure TReflectWidget.GetGrandChild(Child: TReflectWidget; Index: Integer);
begin
  Self.ObjRef := Reflect.Smart.GetFieldArrayObject(Child.ObjRef,
    Widget_Children, Index);
end;

function TReflectWidget.GetText: String;
begin
  Result := Reflect.Smart.GetFieldString(Self.ObjRef, Widget_GetText);
end;

function TReflectWidget.GetItemID: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_ItemID);
end;

function TReflectWidget.GetItemStackSizes: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_ItemAmount);
end;

function TReflectWidget.GetRelativeX: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_RelativeX);
end;

function TReflectWidget.GetRelativeY: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_RelativeY);
end;

function TReflectWidget.HasValidBoundsIndex: Boolean;
begin
  Result := (Self.GetBoundsIndex >= 0) and
    (Self.GetBoundsIndex < Reflect.Smart.GetArraySize(0, Client_WidgetPositionX, 0));
end;

function TReflectWidget.GetScrollX: Integer;
begin
  Exit(Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_ScrollX));
end;

function TReflectWidget.GetScrollY: Integer;
begin
  Exit(Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_ScrollY));
end;

function TReflectWidget.GetWidth: Integer;
begin
  Exit(Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_GetWidth));
end;

function TReflectWidget.GetHeight: Integer;
begin
  Exit(Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_GetHeight));
end;

function TReflectWidget.GetBoundsX: Integer;
begin
  if HasValidBoundsIndex then
    Result := Reflect.Smart.GetFieldArrayInt(0, Client_WidgetPositionX, Self.GetBoundsIndex);
end;

function TReflectWidget.GetBoundsY: Integer;
begin
  if HasValidBoundsIndex then
    Result := Reflect.Smart.GetFieldArrayInt(0, Client_WidgetPositionY,
      Self.GetBoundsIndex);
end;

function TReflectWidget.GetX: Integer;
var
  Parent: TReflectWidget;
begin
  if not Parent.GetParent(Self.GetParentID) then
    Exit(Self.GetBoundsX);
  Result := Parent.GetX + Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_GetX);
  Dec(Result, Self.GetScrollX);
  Parent.Free;
end;

function TReflectWidget.GetY: Integer;
var
  Parent: TReflectWidget;
begin
  if not Parent.GetParent(Self.GetParentID) then
    Exit(Self.GetBoundsY);
  Result := Parent.GetY + Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_GetY);
  Dec(Result, Self.GetScrollY);
  Parent.Free;
end;

function TReflectWidget._GetX: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_GetX);
end;

function TReflectWidget._GetY: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.ObjRef, Widget_GetY);
end;

function TReflectWidget.GetPosition: TPoint;
begin
  Result := Point(Self.GetX, Self.GetY);
end;

function TReflectWidget.IsHidden: Boolean;
var
  Parent: TReflectWidget;
begin
  Result := (Parent.GetParent(Self.GetParentID) and Parent.IsHidden) or
    Reflect.Smart.GetFieldBoolean(Self.ObjRef, Widget_IsHidden);
  Parent.Free;
end;

procedure TReflectWidget.Free;
begin
  Reflect.Smart.FreeObject(Self.ObjRef);
end;
