
type
  TReflectInvItem = record(TReflectItem)
    InvSlot, Quantity: Integer;
  end;

  TReflectInvItemArray = Array of TReflectInvItem;

procedure TReflectInvItemArray.GetAll;
var
  I, TheId, TheQuantity, Count: Integer;
  InvWidget: TReflectWidget;
begin
  InvWidget.GetWidget(WIDGET_Inventory_Container, 0);
  for I := 0 to 27 do
  begin
    TheId := Reflect.Smart.GetFieldArrayInt(
      InvWidget.Reference, Widget_InvIDs, I);
    if (TheId > 0) then
    begin
      Inc(Count);
      SetLength(Self, Count);
      TheQuantity := Reflect.Smart.GetFieldArrayInt(InvWidget.Reference,
        Widget_StackSizes, I);
      with Self[Count - 1] do
      begin
        Id := TheId - 1;
        LoadDef;
        Quantity := TheQuantity - 1;
        InvSlot := I + 1;
      end;
    end;
  end;
  InvWidget.Free;
end;

  {Credit Boreas}
function TReflectionInternals.InvBox(I : Integer): TBox;
var
  Slot1, Slot6: TBox;
begin
  if not InRange(I, 1, 28) then
  begin
    Reflect.Logger.Warn('Incorrect index: %d', [I]);
    Exit;
  end;
  Slot1 := [563, 213, 594, 244];
  Slot6 := [605, 249, 31415, 92653];
  Result.X1 := Slot1.X1 + ((((I + 3) mod 4)) * (Slot6.X1 - Slot1.X1));
  Result.Y1 := Slot1.Y1 + ((((I - 1) div 4)) * (Slot6.Y1 - Slot1.Y1));
  Result.X2 := Result.X1 + (Slot1.X2 - Slot1.X1);
  Result.Y2 := Result.Y1 + (Slot1.Y2 - Slot1.Y1);
end;

procedure TReflectInvItemArray.Get(Item: Variant);
var
  Temp, Temp1: TReflectInvItemArray;
  I, H, T: integer;
begin
  Temp.GetAll;
  if Reflect.Misc.VariantIsString(Item) then
  begin
    H := High(Temp);
    SetLength(Temp1, H + 1);
    for I := 0 to H do
    begin
      if (Temp[I].Name = Item) then
      begin
        Temp1[T] := Temp[I];
        Inc(T);
      end;
    end;
  end
  else
  begin
    H := High(Temp);
    Setlength(Temp1, H + 1);
    for I := 0 to H do
    begin
      if (Temp[i].Id = Item) then
      begin
        Temp1[T] := Temp[I];
        Inc(T);
      end;
    end;
  end;
  Setlength(Temp1, T);
  Self := Temp1;
end;

function TReflectInvItem.Find(Item: Variant): Boolean;
var
  Temp: TReflectInvItemArray;
begin
  Temp.Get(Item);
  if Length(Temp) = 0 then
    Exit;
  Self := Temp[0];
  Result := True;
end;

function TReflectInvItem.Click(ClickType: Integer):
  Boolean;
var
  Box: TBox;
begin
  if Self.InvSlot < 0 then
    Exit;
  Box := Reflect.Internals.InvBox(Self.InvSlot);
  Reflect.Mouse.Move(Box, ClickType);
  Result := True;
end;

function TReflectInvItemArray.IsFull: Boolean;
var
  I, C: Integer;
  RItems: TReflectInvItemArray;
begin
  RItems.GetAll;
  Result := Length(RItems) = 28;
end;

function TReflectInvItemArray.Count: Integer;
var
  I: Integer;
  RItems: TReflectInvItemArray;
begin
  RItems.GetAll;
  Result := Length(RItems);
end;

