type
  TReflectGroundItem = record(TReflectItem)
    Tile: TTile;
    Quantity: Integer;
  end;

  TReflectGroundItemArray = array of TReflectGroundItem;

procedure TReflectGroundItem.Null;
begin
  Self.HighAlchValue := 0;
  Self.Id := 0;
  Self.InvActions := [''];
  Self.Name := '';
  Self.Quantity := 0;
  Self.Tile := Point(0, 0);
end;

procedure TReflectGroundItemArray.Sort;
var
  I, C, L: integer;
  Tpa: TPointArray;
  Temp: TReflectGroundItemArray;
begin
  L := GetArrayLength(Self);
  if L < 1 then
    Exit;
  SetArrayLength(Tpa, L);
  SetArrayLength(Temp, L);
  for I := 0 to L - 1 do
    Tpa[I] := Self[I].Tile;
  sortTPAFrom(Tpa, Reflect.Internals.GetGlobalTile);
  for I := 0 to L - 1 do
    for C := 0 to L - 1 do
      if (Tpa[I].Y = Self[C].Tile.Y) and (tpa[I].X = Self[C].Tile.X) then
        Temp[I] := Self[C];
  Self := Temp;
end;

procedure TReflectGroundItemArray.GetGroundItemsAt(Tile: TPoint; BaseX, BaseY,
  Plane: Integer);
var
  Id, Quantity, Iteration: Integer;
  Temp: TReflectGroundItemArray;
begin
  Reflect.Mem.Get3DObject(ckNull, ckGroundArray, Client_GroundItems, 0, 0,
    Plane, Tile.X, Tile.Y);
  if HookCache[ckGroundArray][0] = 0 then
    Exit;
  Reflect.Mem.GetObject(ckGroundArray, ckGroundList, LinkedList_Head, 0, 0);
  Reflect.Mem.GetObject(ckGroundList, ckGroundList, Node_next, 1, 0);
  SetLength(Temp, 128);
  while (HookCache[ckGroundList][Iteration] > 0) and
    (HookCache[ckGroundList][iteration] <>
    HookCache[ckGroundList][iteration + 1]) do
  begin
    Id := Reflect.Smart.GetFieldInt(
      HookCache[ckGroundList][Iteration + 1], Item_Id);
    Quantity := Reflect.Smart.GetFieldInt(
      HookCache[ckGroundList][Iteration + 1], Item_StackSizes);
    if (Id < 0) or (Quantity < 0) then
      Break;
    Temp[Iteration].Id := Id;
    Temp[Iteration].Quantity := Quantity;
    Temp[Iteration].Tile.X := Tile.X + BaseX;
    Temp[Iteration].Tile.Y := Tile.Y + BaseY;
    Temp[Iteration].LoadDef;
    Reflect.Mem.GetObject(
      ckGroundList, ckGroundList, Node_Next, Iteration + 2, Iteration + 1);
    Inc(Iteration);
  end;
  SetLength(Temp, Iteration);
  Self := Temp;
end;

procedure TReflectGroundItemArray.GetAt(RealTile: TTile);
var
  BaseX, BaseY, Plane: Integer;
begin
  BaseX := Reflect.Internals.BaseX;
  BaseY := Reflect.Internals.BaseY;
  Plane := Reflect.Tiles.GetPlane;
  Self.GetGroundItemsAt(
    Point(RealTile.X - BaseX, RealTile.Y - BaseY), BaseX, BaseY, Plane);
  Reflect.Mem.FreeObjects(ckGroundArray, False);
  Reflect.Mem.FreeObjects(ckGroundList, False);
end;

procedure TReflectGroundItemArray.GetAll(Distance: Integer = 103);
var
   X, Y, BaseX, BaseY, Plane, L, I, H, HighX, HighY: Integer;
   TempArray, TempArray2: TReflectGroundItemArray;
   Position: TTile;
begin
  Position := Reflect.Internals.GetGlobalTile;
  Distance := Round(Distance / 2);
  BaseX := Reflect.Internals.BaseX;
  BaseY := Reflect.Internals.BaseY;
  Position := Point(Position.X - BaseX, Position.Y - BaseY);
  Plane := Reflect.Tiles.GetPlane;
  HighX := Position.X + Distance;
  HighY := Position.Y + Distance;
  if HighX > 103 then
    HighX := 103;
  if HighY > 103 then
    HighY := 103;
  SetLength(Self, 10817);
  for X := Position.X - Distance to HighX do
    for Y := Position.Y - Distance to HighY do
    begin
      SetLength(TempArray, 0);
      TempArray.GetGroundItemsat(
        Point(X, Y), BaseX, BaseY, Plane);
      Reflect.Mem.FreeObjects(ckGroundArray, False);
      Reflect.Mem.FreeObjects(ckGroundList, False);
      L := Length(TempArray);
      if (L > 0) then
      begin
        SetLength(TempArray2, Length(TempArray2) + L);
        H := Length(TempArray2);
        for I := 0 to High(TempArray) do
          TempArray2[H - L + I] := TempArray[I];
      end;
    end;
  Self := TempArray2;
end;

procedure TReflectGroundItemArray.Get(Item: Variant; Distance: Integer = 103);
var
  Temp, Temp1: TReflectGroundItemArray;
  I, H, T: integer;
begin
  Temp.GetAll(Distance);
  if Reflect.Misc.VariantIsString(Item) then
  begin
    H := High(Temp);
    SetLength(Temp1, H + 1);
    for I := 0 to H do
    begin
      if (Temp[I].Name = Item) then
      begin
        Temp1[T] := Temp[I];
        Inc(T);
      end;
    end;
  end
  else
  begin
    H := High(Temp);
    Setlength(Temp1, H + 1);
    for I := 0 to H do
    begin
      if (Temp[I].Id = Item) then
      begin
        Temp1[T] := Temp[I];
        Inc(T);
      end;
    end;
  end;
  Setlength(Temp1, T);
  Self := Temp1;
  Self.Sort;
end;

function TReflectGroundItem.Find(Item: Variant; Distance: Integer = 103):
  Boolean;
var
  Temp: TReflectGroundItemArray;
begin
  Temp.Get(Item, Distance);
  if Length(Temp) = 0 then
  begin
    Self.Null;
    Exit;
  end;
  Temp.Sort;
  if Reflect.Tiles.NearTile(Temp[0].Tile, Distance) then
  begin
    Result := True;
    Self := Temp[0];
  end;
end;
